#!/usr/bin/env python
#
# aionn - asyncio messaging library based on nanomsg and nnpy
#
# Copyright (C) 2016 by Artur Wroblewski <wrobell@riseup.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

"""
Compare concurrency of asyncio based `aionn` coroutines with threads.
"""

import aionn
import asyncio
import nnpy
import time
import uvloop

from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor, \
    as_completed

# TODO: pass as parameters to the script
N = 8 # number of sockets (and threads)
K = 10 ** 5 # number of messages to send/receive

def start_sender():
    sockets = []
    for i in range(N):
        socket = nnpy.Socket(nnpy.AF_SP, nnpy.PUSH)
        socket.connect('tcp://localhost:{}'.format(5550 + i))
        sockets.append(socket)

    for i in range(K):
        data = 'value {}'.format(i).encode()
        for socket in sockets:
            socket.send(data)

    for socket in sockets:
        socket.close()

def start_thread_receiver():
    def read(socket):
        for i in range(K):
            value = socket.recv()

    executor = ThreadPoolExecutor(N)

    sockets = []
    for i in range(N):
        socket = nnpy.Socket(nnpy.AF_SP, nnpy.PULL)
        socket.bind('tcp://*:{}'.format(5550 + i))
        sockets.append(socket)

    start = time.monotonic()
    futures = []
    for socket in sockets:
        fn = executor.submit(read, socket)
        futures.append(fn)

    for fn in as_completed(futures):
        fn.result()
    print('thread: {:.4f}s'.format(time.monotonic() - start))

    for socket in sockets:
        socket.close()

def start_asyncio_receiver():
    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())

    sockets = []
    for i in range(N):
        socket = aionn.Socket(aionn.AF_SP, aionn.PULL)
        socket.bind('tcp://*:{}'.format(5550 + i))
        sockets.append(socket)

    async def read(socket):
        for i in range(K):
            value = await socket.recv()

    loop = asyncio.get_event_loop()

    start = time.monotonic()
    task = asyncio.wait([read(socket) for socket in sockets])
    loop.run_until_complete(task)
    print('asyncio: {:.4f}s'.format(time.monotonic() - start))

    for socket in sockets:
        socket.close()


pool = ProcessPoolExecutor(2)
t1 = pool.submit(start_sender)
t2 = pool.submit(start_thread_receiver)
t1.result()
t2.result()

t1 = pool.submit(start_sender)
t2 = pool.submit(start_asyncio_receiver)
t1.result()
t2.result()

# vim: sw=4:et:ai
